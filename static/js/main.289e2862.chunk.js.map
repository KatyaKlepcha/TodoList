{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","value","onChange","e","currentTarget","onKeyPress","charCode","className","tasks","map","t","key","isDone","type","changeTaskStatus","checked","removeTask","changeFilter","filter","App","todoListId","filteredTasks","tasksObj","setTasks","task","v1","newTasks","changeStatus","taskId","find","todoList","todoLists","tl","setTodoLists","todoListId1","todoListId2","filteredTodoList","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.289e2862.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    filter: FilterValuesType;\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {//todoList исп-ет state внутри себя\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addTask(title.trim(), props.id)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    return <div>\r\n        <h3>{props.title}\r\n            <button onClick={removeTodoList}>x</button>\r\n        </h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? 'error' : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className={'error-message'}>{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id)\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n                        }\r\n\r\n                        return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                            <input type=\"checkbox\"\r\n                                   onChange={onChangeHandler}\r\n                                   checked={t.isDone}\r\n                            />\r\n                            <span>{t.title}</span>\r\n                            <button onClick={onRemoveHandler}>x\r\n                            </button>\r\n                        </li>\r\n                    }\r\n                )\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button onClick={onAllClickHandler} className={props.filter === 'all' ? 'active-filter' : ''}>All</button>\r\n            <button onClick={onActiveClickHandler} className={props.filter === 'active' ? 'active-filter' : ''}>Active\r\n            </button>\r\n            <button onClick={onCompletedClickHandler}\r\n                    className={props.filter === 'completed' ? 'active-filter' : ''}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todoListId: string) {\r\n        let tasks = tasksObj[todoListId];//прежде, чем удалять, нам нужно достать нужный массив\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todoListId] = filteredTasks;//по ключу обращаемся к св-ву объекта и заменяем в нем, таски, кот мы достали, на отфильтрованные таски\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let tasks = tasksObj[todoListId];\r\n        let newTasks = [task, ...tasks];\r\n        tasksObj[todoListId] = newTasks;\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        let tasks = tasksObj[todoListId];\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasksObj})\r\n        }\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListId);//находим нужный тудулист, кот нужно поменять\r\n        if (todoList) {\r\n            todoList.filter = value;//меняем фильтр тудулисту\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    let todoListId1 = v1();//ассоциативный массив\r\n    let todoListId2 = v1();\r\n\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([ //упакуем данные в объекты (тудулист не явл объектом)\r\n        {id: todoListId1, title: 'What to learn', filter: 'active'},\r\n        {id: todoListId2, title: 'What to buy', filter: 'completed'}\r\n    ])\r\n\r\n    let removeTodoList = (todoListId: string) => {\r\n        let filteredTodoList = todoLists.filter(tl => tl.id !== todoListId)\r\n        setTodoLists(filteredTodoList)\r\n        delete tasksObj[todoListId]\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n\r\n    let [tasksObj, setTasks] = useState({\r\n        [todoListId1]: [//храним значения для отдельного тудулиста в виде такой стр-ры\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},],\r\n        [todoListId2]: [//обращаемся не к самому св-ву todoListId1, а к тому, что в нем хранится\r\n            {id: v1(), title: \"Book\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: true},]\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                //стрелочн фция вызовется столько раз, сколько объектов сидит в нашем тудулисте (у нас 2)\r\n                todoLists.map(tl => {//map вызывает стрелочную функция для каждого тудулиста, по кот пробегается map\r\n                    //фильтрацию нужно делать здесь,т.к. у нас работа с каждым конкретным тудулистом идет внутри map-а\r\n                    let tasksForTodoList = tasksObj[tl.id];//конкретные таски, кот попадут в todoList определяться внутри стрелочной функции\r\n                    if (tl.filter === 'completed') {//берем фильтр, кот сидит в конкретном тудулисте\r\n                        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\r\n                    }\r\n\r\n                    if (tl.filter === 'active') {//берем фильтр, кот сидит в конкретном тудулисте\r\n                        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}//сюда попадет отфильтрованный массив тасок\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodoList={removeTodoList}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}