{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","reducers/tl-reducer.ts","reducers/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todoListId","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","removeTask","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodoListTitle","newTitle","addTask","tasksForTodoList","tasks","filter","t","removeTodoList","map","Button","initialState","v1","AppWithRedux","dispatch","useDispatch","todoLists","useSelector","state","taskId","type","removeTasksAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","changeTodoListFilterAC","action","removeTodoListAC","changeTodoListTitleAC","addTodoList","addTodoListAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","todoList","find","copyState","todoListTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7a87b5ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   variant={\"outlined\"}\r\n                   label={\"Type value\"}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}//если строка не пустая или не null, тогда будет true и ошибка покажется\r\n                   helperText={error}//если ошибки не будет, то helperText не покажется\r\n        />\r\n        <IconButton onClick={addItem} color={\"primary\"}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n        {/*{error && <div className={'error-message'}>{error}</div>}*/}\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType)=> {\r\n    console.log('EditableSpan is called')\r\n    let [editMode, setEditMode] = useState(false)//cо старта у нас false-не режим редактирования\r\n    let [title, setTitle] = useState('')//cо старта у нас false-не режим редактирования\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)//эта ф-ция будет запуск-ся, input будет закидывать сюда объект событие и мы втутри этой ф-ции можем обатиться к этому объекту события(input-e в кот произошло событие, и достать то значение, кот пытается напечататься, чтобы отправить его в локальный state(setTitle), локальный стэйт(setTitle) изменит title на новое значение, ф-ция перерисуется и этот title заставит input перерисовать то, что введено в этот инпут\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todoListId)\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todoListId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todoListId)\r\n    },[props.changeTaskTitle,props.task.id, props.todoListId])\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.isDone}\r\n        />\r\n        <EditableSpan title={props.task.title}\r\n                      onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    filter: FilterValuesType;\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {//todoList исп-ет state внутри себя\r\n    console.log('Todolist is called')\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === 'completed') {//берем фильтр, кот сидит в конкретном тудулисте\r\n        tasksForTodoList = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    if (props.filter === 'active') {//берем фильтр, кот сидит в конкретном тудулисте\r\n        tasksForTodoList = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton onClick={removeTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {tasksForTodoList.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todoListId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All</Button>\r\n            <Button variant={props.filter === 'active' ? \"contained\" : \"text\"} color={\"primary\"}\r\n                    onClick={onActiveClickHandler}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                    onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST',//команда, что делать( удалить тудулист)\r\n    id: string//данные,для вып этой команды\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListFilterActionType\r\n    | ChangeTodoListTitleActionType\r\n\r\n\r\nexport let todoListId1 = v1();\r\nexport let todoListId2 = v1();\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST': {\r\n            const todoListId = action.todoListId\r\n            let todoList: TodoListType = {\r\n                id: todoListId,\r\n                filter: \"all\",\r\n                title: action.title\r\n            }\r\n            return [todoList, ...state];//вернем модифицированную копию\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)//в state todoLists приходят\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todoList = state.find(tl => tl.id === action.id);//находим нужный тудулист, кот нужно поменять\r\n            if (todoList) {\r\n                todoList.filter = action.filter;//меняем фильтр тудулисту\r\n            }\r\n            return [...state]\r\n            // return state.map(tl => {\r\n            //     if (tl.id === action.id) {\r\n            //         return {...tl, filter: action.filter}\r\n            //     } else {\r\n            //         return tl\r\n            //     }\r\n            // })\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todoList = state.find(tl => tl.id === action.id);//находим нужный тудулист, кот нужно поменять\r\n            if (todoList) {\r\n                todoList.title = action.title;//меняем фильтр тудулисту\r\n            }\r\n            return [...state]\r\n\r\n\r\n            // return state.map(tl => {\r\n            //     if (tl.id === action.id) {\r\n            //         return {...tl, title: action.title}\r\n            //     } else {\r\n            //         return tl\r\n            //     }\r\n            // })\r\n        }\r\n        default:\r\n            //throw new Error(\"I don't understand this type\")\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        title: title,\r\n        todoListId: v1()\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todoListId\r\n    }\r\n}\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: id,\r\n        title: title\r\n    }\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilterValuesType, todoListId: string): ChangeTodoListFilterActionType => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        id: todoListId,\r\n        filter: filter\r\n    }\r\n}\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./tl-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-STATUS-TASK'\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            let todoListTasks = copyState[action.todoListId]\r\n            copyState[action.todoListId] = todoListTasks.filter(t => t.id != action.taskId)\r\n            return copyState;//вернем модифицированную копию\r\n        }\r\n        case 'ADD-TASK': {\r\n            let copyState = {...state}\r\n            let task = {id: v1(), title: action.title, isDone: false};\r\n            let todoListTasks = copyState[action.todoListId]\r\n            copyState[action.todoListId] = [task, ...todoListTasks]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-STATUS-TASK': {\r\n            // let copyState = {...state}\r\n            // let todoListTasks = copyState[action.todoListId]\r\n            // todoListTasks.map(task => {\r\n            //     if (task.id === action.taskId) {\r\n            //         return {...task, isDone: action.isDone}\r\n            //     } else {\r\n            //         return copyState\r\n            //     }\r\n            // })\r\n\r\n            // const copyState = {...state}\r\n            // let tasks = copyState[action.todoListId];\r\n            // let task = tasks.find(t => t.id === action.taskId);\r\n            // if (task) {\r\n            //     task.isDone = action.isDone;\r\n            // }\r\n            // return copyState;\r\n\r\n            let todoListTasks = state[action.todoListId]//найдем нужную таску\r\n            state[action.todoListId]  = todoListTasks.map(t=>t.id===action.taskId\r\n                ? {...t,isDone:action.isDone}\r\n                :t\r\n            )\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            // let copyState = {...state}\r\n            // let todoListTasks = copyState[action.todoListId].map(task => {\r\n            //         if (task.id === action.taskId) {\r\n            //             return {...task, title: action.title}\r\n            //         } else {\r\n            //             return task\r\n            //         }\r\n            //     }\r\n            // )\r\n\r\n\r\n            // const copyState = {...state}\r\n            // let tasks = copyState[action.todoListId];\r\n            // //найдем нужную таску\r\n            // let task = tasks.find(t => t.id === action.taskId);\r\n            // //изменяем таску, если она нашлась\r\n            // if (task) {\r\n            //     task.title = action.title;\r\n            // }\r\n            // return copyState;\r\n\r\n            let todoListTasks = state[action.todoListId]//найдем нужную таску\r\n            state[action.todoListId]  = todoListTasks.map(t=>t.id===action.taskId\r\n                ? {...t,title:action.title}\r\n                :t\r\n            )\r\n            return ({...state})\r\n\r\n\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const copyState = {...state};\r\n            copyState[action.todoListId] = [];\r\n            return copyState\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state};\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTasksAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todoListId}\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-STATUS-TASK', taskId, isDone, todoListId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todoListId}\r\n}\r\n\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./reducers/tl-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTasksAC} from \"./reducers/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    console.log('App is called')\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        dispatch(removeTasksAC(id, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskAC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListId: string,) => {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        const action = removeTodoListAC(todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n        const action = changeTodoListTitleAC(id, newTitle)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        //стрелочн фция вызовется столько раз, сколько объектов сидит в нашем тудулисте (у нас 2)\r\n                        todoLists.map(tl => {//map вызывает стрелочную функция для каждого тудулиста, по кот пробегается map\r\n                            //фильтрацию нужно делать здесь,т.к. у нас работа с каждым конкретным тудулистом идет внутри map-а\r\n                            let tasksForTodoList = tasks[tl.id];//конкретные таски, кот попадут в todoList определяться внутри стрелочной функции\r\n\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodoList}//сюда попадет отфильтрованный массив тасок\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"../reducers/tl-reducer\";\r\nimport {tasksReducer} from \"../reducers/tasks-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}